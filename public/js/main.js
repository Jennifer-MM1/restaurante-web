// ===== JAVASCRIPT CORREGIDO PARA MEN√ö M√ìVIL =====

// Variables globales para el men√∫ - NUEVA IMPLEMENTACI√ìN
let menuState = {
    isOpen: false,
    elements: {
        toggle: null,
        menu: null,
        overlay: null
    },
    initialized: false
};

// ===== FUNCI√ìN PRINCIPAL CORREGIDA =====
function setupMobileMenu() {
    console.log('üîß Configurando men√∫ m√≥vil corregido...');
    
    // Prevenir m√∫ltiples inicializaciones
    if (menuState.initialized) {
        console.log('‚ö†Ô∏è Men√∫ ya inicializado');
        return;
    }
    
    // Buscar elementos
    const navToggle = document.getElementById('nav-toggle');
    const navMenu = document.getElementById('nav-menu');
    
    if (!navToggle) {
        console.error('‚ùå No se encontr√≥ #nav-toggle');
        return;
    }
    
    if (!navMenu) {
        console.error('‚ùå No se encontr√≥ #nav-menu');
        return;
    }
    
    // Guardar referencias
    menuState.elements.toggle = navToggle;
    menuState.elements.menu = navMenu;
    
    // Crear overlay
    createMenuOverlay();
    
    // Limpiar eventos anteriores
    cleanupMenuEvents();
    
    // Configurar nuevos eventos
    setupMenuEvents();
    
    // Marcar como inicializado
    menuState.initialized = true;
    
    console.log('‚úÖ Men√∫ m√≥vil configurado correctamente');
    console.log('üì± Elementos:', menuState.elements);
}

// Crear overlay
function createMenuOverlay() {
    // Eliminar overlay existente
    const existingOverlay = document.querySelector('.nav-overlay');
    if (existingOverlay) {
        existingOverlay.remove();
    }
    
    // Crear nuevo overlay
    const overlay = document.createElement('div');
    overlay.className = 'nav-overlay';
    overlay.id = 'nav-overlay';
    document.body.appendChild(overlay);
    
    menuState.elements.overlay = overlay;
    console.log('‚úÖ Overlay creado');
}

// Limpiar eventos anteriores
function cleanupMenuEvents() {
    const { toggle } = menuState.elements;
    
    if (toggle) {
        // Clonar elemento para remover todos los event listeners
        const newToggle = toggle.cloneNode(true);
        toggle.parentNode.replaceChild(newToggle, toggle);
        menuState.elements.toggle = newToggle;
        console.log('üßπ Eventos anteriores limpiados');
    }
}

// Configurar eventos del men√∫
function setupMenuEvents() {
    const { toggle, menu, overlay } = menuState.elements;
    
    // Evento principal del toggle
    toggle.addEventListener('click', handleMenuToggle);
    
    // Eventos del men√∫
    menu.addEventListener('click', handleMenuClick);
    
    // Evento del overlay
    if (overlay) {
        overlay.addEventListener('click', handleOverlayClick);
    }
    
    // Eventos globales
    document.addEventListener('keydown', handleGlobalKeydown);
    window.addEventListener('resize', handleWindowResize);
    
    console.log('‚úÖ Eventos configurados');
}

// ===== MANEJADORES DE EVENTOS =====

function handleMenuToggle(e) {
    e.preventDefault();
    e.stopPropagation();
    
    console.log('üçî Toggle clicked, estado actual:', menuState.isOpen);
    
    if (menuState.isOpen) {
        closeMenu();
    } else {
        openMenu();
    }
}

function handleMenuClick(e) {
    // Solo cerrar si es un enlace de navegaci√≥n
    if (e.target.classList.contains('nav-link')) {
        console.log('üîó Nav link clicked');
        
        // Peque√±o delay para la animaci√≥n
        setTimeout(() => {
            closeMenu();
        }, 150);
    }
}

function handleOverlayClick(e) {
    console.log('üëÜ Overlay clicked');
    closeMenu();
}

function handleGlobalKeydown(e) {
    if (e.key === 'Escape' && menuState.isOpen) {
        console.log('‚å®Ô∏è Escape pressed');
        closeMenu();
    }
}

function handleWindowResize() {
    if (window.innerWidth > 768 && menuState.isOpen) {
        console.log('üì± Window resized, closing menu');
        closeMenu();
    }
}

// ===== FUNCIONES DE CONTROL DEL MEN√ö =====

function openMenu() {
    console.log('üîì Abriendo men√∫...');
    
    const { menu, overlay } = menuState.elements;
    
    // Cambiar estado
    menuState.isOpen = true;
    
    // Agregar clases con un peque√±o delay para asegurar la animaci√≥n
    requestAnimationFrame(() => {
        menu.classList.add('active');
        if (overlay) {
            overlay.classList.add('active');
        }
        
        // Prevenir scroll del body
        document.body.style.overflow = 'hidden';
        
        // Actualizar icono
        updateMenuIcon();
        
        console.log('üìÇ Men√∫ abierto - clases aplicadas');
    });
}

function closeMenu() {
    console.log('üîí Cerrando men√∫...');
    
    const { menu, overlay } = menuState.elements;
    
    // Cambiar estado
    menuState.isOpen = false;
    
    // Remover clases
    menu.classList.remove('active');
    if (overlay) {
        overlay.classList.remove('active');
    }
    
    // Restaurar scroll del body
    document.body.style.overflow = '';
    
    // Actualizar icono
    updateMenuIcon();
    
    console.log('üìÅ Men√∫ cerrado - clases removidas');
}

function updateMenuIcon() {
    const { toggle } = menuState.elements;
    const icon = toggle.querySelector('i');
    
    if (icon) {
        if (menuState.isOpen) {
            icon.className = 'fas fa-times';
            toggle.setAttribute('aria-label', 'Cerrar men√∫');
            toggle.setAttribute('aria-expanded', 'true');
        } else {
            icon.className = 'fas fa-bars';
            toggle.setAttribute('aria-label', 'Abrir men√∫');
            toggle.setAttribute('aria-expanded', 'false');
        }
        
        console.log('üîÑ Icono actualizado:', menuState.isOpen ? 'X' : '‚ò∞');
    }
}

// ===== FUNCIONES DE DEBUG =====
function debugMenu() {
    console.log('üîç DEBUG MEN√ö COMPLETO:');
    console.log('üìä Estado del men√∫:', menuState);
    console.log('üì± Ancho de ventana:', window.innerWidth);
    console.log('üîò Toggle element:', menuState.elements.toggle);
    console.log('üìã Menu element:', menuState.elements.menu);
    console.log('ü´• Overlay element:', menuState.elements.overlay);
    
    if (menuState.elements.toggle) {
        console.log('üëÅÔ∏è Toggle visible:', getComputedStyle(menuState.elements.toggle).display);
    }
    
    if (menuState.elements.menu) {
        console.log('üìÇ Menu active:', menuState.elements.menu.classList.contains('active'));
        console.log('üé® Menu styles:', {
            transform: getComputedStyle(menuState.elements.menu).transform,
            opacity: getComputedStyle(menuState.elements.menu).opacity,
            visibility: getComputedStyle(menuState.elements.menu).visibility
        });
    }
}

function forceCloseMenu() {
    console.log('üö® Forzando cierre del men√∫...');
    menuState.isOpen = false;
    
    const menu = document.getElementById('nav-menu');
    const overlay = document.querySelector('.nav-overlay');
    
    if (menu) menu.classList.remove('active');
    if (overlay) overlay.classList.remove('active');
    
    document.body.style.overflow = '';
    updateMenuIcon();
    
    console.log('‚úÖ Men√∫ forzado a cerrar');
}

function forceOpenMenu() {
    console.log('üö® Forzando apertura del men√∫...');
    menuState.isOpen = true;
    
    const menu = document.getElementById('nav-menu');
    const overlay = document.querySelector('.nav-overlay');
    
    if (menu) menu.classList.add('active');
    if (overlay) overlay.classList.add('active');
    
    document.body.style.overflow = 'hidden';
    updateMenuIcon();
    
    console.log('‚úÖ Men√∫ forzado a abrir');
}

// Hacer funciones disponibles globalmente para debug
window.debugMenu = debugMenu;
window.forceCloseMenu = forceCloseMenu;
window.forceOpenMenu = forceOpenMenu;
window.menuState = menuState;

// ===== INICIALIZACI√ìN MEJORADA =====

// Reemplazar tu DOMContentLoaded existente con este:
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ DOM loaded, inicializando...');
    
    // Configurar men√∫ m√≥vil PRIMERO
    setupMobileMenu();
    
    // Peque√±o delay para asegurar que todo est√© listo
    setTimeout(() => {
        // Tu inicializaci√≥n existente
        initializeApp();
    }, 100);
});

function initializeApp() {
    console.log('üèÅ Inicializando aplicaci√≥n principal...');
    
    // Tu c√≥digo existente sin setupMobileMenu()
    setupEventListeners(); // SIN navegaci√≥n m√≥vil
    loadStatistics();
    loadRestaurants();
    updateActiveNavLink();
}

// Event listeners originales SIN navegaci√≥n m√≥vil
function setupEventListeners() {
    // NO incluir navegaci√≥n m√≥vil aqu√≠
    
    // B√∫squeda
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');
    
    if (searchInput) {
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                performSearch();
            }
        });
    }
    
    if (searchBtn) {
        searchBtn.addEventListener('click', performSearch);
    }
    
    // Resto de tus event listeners...
    console.log('‚úÖ Event listeners principales configurados');
}

console.log('üì± Script de men√∫ m√≥vil cargado');